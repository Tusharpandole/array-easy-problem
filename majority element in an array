#first approach 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int>mp ;
        for(int i = 0 ; i < nums.size() ;i++){
            mp[nums[i]]++ ;
        }
        int maxcount = 0 ;
        int res = -1 ;
        for(auto x : mp){
            if(x.second >maxcount){
                maxcount = x.second ;
                res = x.first ;
            }
        }
       return res ;
    }
};
#second approach in o(n) time complexity and o(1) space complexity 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
      int majority = nums[0] ;
      int count = 1 ;
      for(int i = 1 ; i < nums.size() ; i++){
          if(majority ==  nums[i]){
               count +=1 ;
          }else
          {
              count -=1 ;
              if(count == 0)
              {
                  majority = nums[i] ;
                  count = 1 ;
              }
          }
      }
      return majority ;
    }
};
