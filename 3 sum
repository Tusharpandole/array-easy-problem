#optimal approach = time complexity O(n^2) and space complexity = O(1)
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     vector<vector<int>>ans ;
     if(nums.size() < 3)return ans ;
     sort(nums.begin() , nums.end()) ;
     for(int i = 0 ; i < nums.size()-2 ; i++){
         if(i==0 || nums[i-1] != nums[i]){
             int l = i+1 , h = nums.size()-1 , sum = -nums[i] ;
             while(l<h){
                 if(nums[l]+nums[h] == sum){
                     ans.push_back({nums[i],nums[l],nums[h]});
                     while(l<h && nums[l]==nums[l+1]){l++ ;}
                     while(l<h && nums[h]==nums[h-1]){h-- ;}
                     l++ ;
                     h-- ;
                 }
                 else if(nums[l]+nums[h] < sum){l++ ;}
                 else h-- ;
             }
         }
     }
     return ans ;
    }
};

#brute forch time complexity = O(n^3) ans space complexity = O(1)
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     vector<vector<int>>ans ;
     set<vector<int>>s ;
     int n = nums.size() ;
     for(int i = 0 ; i<n ; i++ ){
         for(int j = i+1 ; j < n ; j++){
             for(int k = j+1 ; k < n ; k++){
                 if(nums[i]+nums[j]+nums[k] == 0){
                 vector<int>v ;
                 v.push_back(nums[i]) ;
                 v.push_back(nums[j]) ;
                 v.push_back(nums[k]) ;
                 sort(v.begin(),v.end()) ;
                 s.insert(v) ;
                 }
             }
         }
     }
     for(auto i : s){
         ans.push_back(i) ;
     }
     return ans ;
    }
};//this will give TLE with big arrays 
