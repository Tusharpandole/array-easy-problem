#first approach time complexity = O(n) and space complexity =O(n)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>v ;
        int flag = 0 ,zeroCount  = 0;
        int n = nums.size() ;
        for(int i = 0 ; i < n ; i++){
            if(nums[i]==0){
                zeroCount++ ;
            }
        }
        for(int i=0;i<n;i++){
            if(nums[i] != 0){flag = 1 ;}
        }
        int k = -1 ;
         int newProd = 1 ;
        for(int i = 0 ; i < n ; i++){
            if(nums[i]==0){
              k=i ;
              break ;
            }
        }if(k == -1){
        long long int prod = 1 ;
        int n = nums.size() ;
        for(int i=0;i<n;i++){
            prod*=nums[i] ;
        }
        for(int i=0;i<n;i++){
            v.push_back(prod/nums[i]) ;
        }
        return v ;
    }
    else if(flag ==0 || zeroCount > 1){
        for(int i=0;i<n;i++){
            v.push_back(0) ;
           
        }
         return v ;
    }
    else{
     for(int i = 0 ; i < n ; i++){
         if(nums[i] != 0){
             newProd*=nums[i] ;
         }
     }
     for(int i=0;i<k;i++){v.push_back(0);}
     v.push_back(newProd) ;
     for(int i=k+1 ; i<n ; i++){
         v.push_back(0) ;
     }
     return v ;
    }
    }
};
