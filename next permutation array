//optimal approach 
time complexity -> O(n)  and space complexity ->O(1) 
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int flag = 0 ;
        int val = 0 ;
        int index = -1 ;
        int minimum = 0 ;
        for(int i = nums.size()-1 ; i > 0 ; i--){
            if(nums[i] > nums[i-1]){
               val = nums[i-1]  ;
               index = i ;
              break ;
            }
        }
        if(index == -1){
            reverse(nums.begin() , nums.end()) ;
        }else{
            int prev = index ;
        for(int i = index+1  ; i < nums.size() ; i++ ){
            if(nums[i] > val && nums[i]  <= nums[prev]){
            prev = i ;
            }
        }
        swap(nums[index-1] , nums[prev]) ;
        reverse(nums.begin()+index , nums.end()) ;
        }
    }
};
